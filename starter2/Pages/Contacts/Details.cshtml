@page
@model ContactManager.Pages.Contacts.DetailsModel
@{
    ViewData["Title"] = "Details";
}
<h2>Details</h2>
<div>
    <h4>Contact</h4>
    <hr />
    <dl class="dl-horizontal">
        <dt>
            @Html.DisplayNameFor(model => model.Contact.Name)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.Contact.Name)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.Contact.Address)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.Contact.Address)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.Contact.City)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.Contact.City)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.Contact.State)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.Contact.State)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.Contact.Zip)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.Contact.Zip)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.Contact.Email)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.Contact.Email)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.Contact.Status)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.Contact.Status)
        </dd>
    </dl>
</div>
@if (Model.Contact.Status != ContactStatus.Approved)
{
    var result = await AuthorizationServices.AuthorizeAsync(User, Model, ContactOperations.Approve);
    @if (result.Succeeded)
    {
        <form asp-action="SetStatus" asp-controller="Contacts" style="display:inline;">
            <input type="hidden" name="id" value="@Model.Contact.ContactId" />
            <input type="hidden" name="status" value="@ContactStatus.Approved" />
            <button type="submit" class="btn btn-xs btn-success">Approve</button>
        </form>
    }
}
@if (Model.Contact.Status != ContactStatus.Rejected)
{
    var result = await AuthorizationServices.AuthorizeAsync(User, Model, ContactOperations.Reject);
    @if (result.Succeeded)
    {
        <form asp-action="SetStatus" asp-controller="Contacts" style="display:inline;">
            <input type="hidden" name="id" value="@Model.Contact.ContactId" />
            <input type="hidden" name="status" value="@ContactStatus.Rejected" />
            <button type="submit" class="btn btn-xs btn-danger">Reject</button>
        </form>
    }
}
<div>
    @* Uncomment to perform authorization check. A real app would hide the edit link from users
        uses who don't have edit access. A user without edit access can click the link but will get denied
        access in the controller.*@
    @{ 
        var result3 = await AuthorizationServices.AuthorizeAsync(User, Model, ContactOperations.Update);
        @if (result3.Succeeded)
        {
             <a asp-action="Edit" asp-route-id="@Model.Contact.ContactId">Edit</a> <text>|</text>
        }
    }

    <a asp-action="Index">Back to List</a>
</div>
    </dl>
</div>
<div>
    <a asp-page="./Edit" asp-route-id="@Model.Contact.ContactId">Edit</a> |
    <a asp-page="./Index">Back to List</a>
</div>
